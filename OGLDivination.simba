program OGLDivination;
{$i cLib.simba}

{ This script requires ogLib. Learn how to set it up correctly here:
  https://villavu.com/forum/showthread.php?t=112486

  This script also requires cLib. Learn how to set it up correctly here:
  https://villavu.com/forum/showthread.php?t=113750

  Make sure to set your game window to 'Resizable' and your interface to the
  RuneScape 3 default. Also turn on 'Show XP tracker' at the Interface settings.

  Setup the script at line 41, setup alerting, screen-size and debug options at lines 46-52.

  Setup
  =====
  1. Start the script while standing next to the rift. }


{ const Script Constants;
  Description: Constants necessary for the script to work. Should not be changed.
  Credits: Lucidity and Clarity for the Wisp and Rift IDs }
const
  WISPS : tCardinalArray =
    [2096184025, 3184599943, 513349550, 4056107006, 2711457438, 3056303715, 2901147625,
    476727875, 253273008, 1445430840, 204531869, 1654363202, 1746202694, 3287999718,
    1254836839, 2425171784, 3905910680, 3311421043, 678917030, 3216451374, 2615235222,
    3127801596, 1796003621, 2049406856, 3794187, 3981683886, 2331359802, 1536763370,
    302289781];
  ENRICHED_WISPS : tCardinalArray =
    [2096184025, 4056107006, 1397217661, 3382154561, 253273008, 46425927, 3181124765,
    496689599, 1155804703, 4059913915, 2427430304, 3382154561, 1213881536, 1177801797,
    544432566, 3312067199, 3236460745, 3236460745, 526985585];
  CHRONICLE_WISP = 3382154561;
  RIFTS : tCardinalArray = [2316399910, 1587178372, 348652304, 3547798924, 3031788624, 1399746771];
  MEMORIES : array[0..1] of integer = [77010, 106845];

{ const User Constants;
  Description: Change these to your own preference. }
const
  METEORITE_SKILL = DIVINATION;

{ const Misc Constants;
  Description: Miscellaneous constants for the script. }
const
  WIDTH = 1440;
  HEIGHT = 900;
  GLX_DEBUG = 'none'; // options: none, models, textures, fonts
  VERSION = '1.0.2';
  ALERT_FLAG = false;
  ALERT_KEYWORD = 'Username';
  ALERT_SOUND = 'C:\Simba\sound.wav';

var
  clientCenter, startPoint: tPoint;
  startTime, startExperience, playerId: integer;
  canPrintProgress, canAlert, canWalk, canConvert, canClickWisp: tCountDown;

procedure printProgress();
var
  elapsedTime: integer;
  hours: double;
  minutes: double;
  gainedExperience: integer;
begin
  elapsedTime := getSystemTime() - startTime;
  hours := elapsedTime / 3600000;
  minutes := floor(elapsedTime / 60000) mod 60;
  gainedExperience := player.getExperience() - startExperience;

  writeln('Running for: ', floor(hours), 'h ', minutes, 'm');
  writeln('Experience earned: ', gainedExperience);
  writeln('Experience per hour: ', floor(gainedExperience / hours));
  writeln('=========================================');

  canPrintProgress.setTime(20000);
end;

procedure twiddleThumbs;
begin
  if ALERT_FLAG and canAlert.isFinished() then
  begin
    if antiban.alert(ALERT_KEYWORD) then
    begin
      playSound(ALERT_SOUND);
      canAlert.setTime(30000);
    end;
  end;

  antiban.checkRandoms();

  case random(533) of
    1: antiban.rotateCamera(342, 11, 4);
  end;
end;

procedure closeDialogue();
var
  funcTimeout: tCountDown;
begin
  typeByte(VK_SPACE);
  funcTimeout.setTime(3000);
  repeat
    wait(normalRandom(150, 300));
  until (funcTimeout.isFinished()) or (not dialogue.hasDialogue());
end;

function hasRift(): boolean;
var
  funcRiftModels: glModelArray;
begin
  funcRiftModels := ogl.getModels(RIFTS);
  result := (not funcRiftModels.isEmpty()) and (clientCenter.closest(funcRiftModels)[0].isVisible());
end;

function hasMemories(): boolean;
begin
  result := not ogl.getTextures(MEMORIES).isEmpty();
end;

procedure walkToRift();
var
  funcTimeout: tCountDown;
  funcDegrees: integer;
begin
  if canWalk.timeRemaining then
    exit();

  walking.walkToLocalPoint(startPoint);

  funcTimeout.setTime(5000);
  repeat
    wait(100);
  until (funcTimeout.isFinished()) or (hasRift());

  if not hasRift() then
  begin
    funcTimeout.setTime(5000);
    repeat
      funcDegrees := (mainScreen.getDegrees()[0] + normalRandom(45, 100)) mod 360;
      mainScreen.setHorizontalDegrees(funcDegrees);
      wait(normalRandom(500, 1000));
    until funcTimeout.isFinished() or hasRift();
  end;

  canWalk.setTime(normalRandom(5000, 7000));
end;

procedure convertToExperience();
var
  funcItemCount: integer;
  funcTimeout: tCountDown;
begin
  if not mouse.rightClickOption(clientCenter.closest(ogl.getModels(RIFTS))[0].randomizePointEllipse(20), 'Convert to enhanced experience', normalRandom(250, 600)) then
  begin
    walkToRift();
    exit();
  end;

  wait(normalRandom(7000, 9000));
  funcTimeout.setTime(normalRandom(80000, 90000));

  repeat
    wait(200);
  until (funcTimeout.isFinished()) or (not hasMemories());

  if not inventory.isFull() and canPrintProgress.isFinished() then
    printProgress();

  canConvert.setTime(5000);
end;

procedure clickWisp();
var
  funcWispModels: glModelArray;
  funcWispPoint, funcClickPoint: tPoint;
  funcTimeout: tCountDown;
  funcDegrees: integer;
  funcOption: string;
begin
  funcWispModels := ogl.getModels(CHRONICLE_WISP);
  funcOption := 'Harvest';
  if funcWispModels.isEmpty() then
    funcWispModels := ogl.getModels(ENRICHED_WISPS)
  else
    funcOption := 'Capture';
  if funcWispModels.isEmpty() then
    funcWispModels := ogl.getModels(WISPS);

  if funcWispModels.isEmpty() then
  begin
    walkToRift();
    exit();
  end;

  funcWispPoint := clientCenter.closest(funcWispModels)[0];

  if not funcWispPoint.isVisible() then
  begin
    funcDegrees := (mainScreen.getDegrees()[0] + normalRandom(45, 100)) mod 360;
    mainScreen.setHorizontalDegrees(funcDegrees);
    wait(normalRandom(0, 500));
    exit();
  end;

  funcWispPoint := funcWispPoint.randomizePointEllipse(15);
  funcClickPoint := [funcWispPoint.x, (funcWispPoint.y - normalRandom(11, 22))];
  if (not mouse.clickAction(funcClickPoint, funcOption)) then
  begin
    wait(normalRandom(800, 1600));
    funcClickPoint := [funcWispPoint.x, (funcWispPoint.y + normalRandom(11, 22))];
    mouse.clickAction(funcClickPoint, funcOption)
  end;

  canClickWisp.setTime(normalRandom(7000, 10000));
end;

procedure mainLoop();
var
  funcReaction: procedure() = @twiddleThumbs;
begin
  if (inventory.isFull()) then
  begin
    if (dialogue.hasDialogue()) then
      funcReaction := @closeDialogue
    else if (not hasRift()) then
      funcReaction := @walkToRift
    else if (hasRift()) and (canConvert.isFinished()) then
      funcReaction := @convertToExperience;
  end
  else if (not player.isAnimating(playerId)) and (canClickWisp.isFinished()) then
    funcReaction := @clickWisp;

  funcReaction();
end;

begin
  ogl.setup(WIDTH, HEIGHT);
  clientCenter := ogl.getClientMidPoint();
  startTime := getSystemTime();
  ogl.setDebugMode(GLX_DEBUG);

  if (not web.isUpToDate(VERSION, 'https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLDivination.version')) then
    web.update('https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLDivination.simba', 'OGLDivination');

  writeln('[OGL] Divination v', VERSION, ' by ChaosEnergy');
  writeln('=========================================');

  try
    antiban.setMeteoriteSkill(METEORITE_SKILL);
    playerId := player.getId();
    startExperience := player.getExperience();
    startPoint := minimap.getLocalPosition();

    repeat
      mainLoop;
      wait(normalRandom(220, 670));
    until false;
  except
    writeln('Oops! It appears I have crashed.');
    login.logout();
    terminateScript();
  end;
end.