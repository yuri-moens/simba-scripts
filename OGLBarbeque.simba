program OGLBarbeque;
{$i cLib.simba}

const
  BARBEQUE_CHOPPING_TABLE: tCardinalArray = [3858309013, 3086665917];

{ const Temperature Constants;
  Description: Constants for the temperature. }
const
  EMPTY_GAUGE = 1178790;
  ICE_CREAM = 45645;
  COCKTAIL_TID = 63495;
  COCKTAIL_CID = 725011;

{ const Misc Constants;
  Description: Miscellaneous constants for the script. }
const
  WIDTH = 1440;
  HEIGHT = 900;
  GLX_DEBUG: string = 'none';
  VERSION: string = '2.1.0';
  METEORITE_SKILL = ATTACK;

var
  clientCenter: tPoint;
  canCook, canPrintProgress, canDrinkCocktail: tCountDown;
  startTime, startExperience, playerId: integer;

procedure twiddleThumbs;
begin
  case random(533) of
    1: antiban.rotateCamera(342, 11, 4);
  end;
end;

procedure printProgress();
var
  elapsedTime: integer;
  hours: double;
  minutes: double;
  gainedExperience: integer;
begin
  elapsedTime := getSystemTime() - startTime;
  hours := elapsedTime / 3600000;
  minutes := floor(elapsedTime / 60000) mod 60;
  gainedExperience := player.getExperience() - startExperience;

  writeln('Running for: ', floor(hours), 'h ', minutes, 'm');
  writeln('Experience earned: ', gainedExperience);
  writeln('Experience per hour: ', floor(gainedExperience / hours));
  writeln('=========================================');

  canPrintProgress.setTime(60000);
end;

procedure cook;
begin
  mouse.click(clientCenter.closest(ogl.getModels(BARBEQUE_CHOPPING_TABLE))[0].randomizePointEllipse(50));

  canCook.setTime(normalRandom(2000, 3000));
end;

function hasMaxTemperature: boolean;
begin
  result := (ogl.getTextures(EMPTY_GAUGE).indexes() = 0);
end;

function eatIceCream: boolean;
var
  funcTimeout: tCountDown;
begin
  if (inventory.clickItem(ICE_CREAM)) then
  begin
    funcTimeout.setTime(5000);
    repeat
      wait(normalRandom(300, 500));
    until (funcTimeout.isFinished()) or (not hasMaxTemperature());
  end;

  result := (not hasMaxTemperature());
end;

function shouldDrinkCocktail: boolean;
var
  funcChat: tStringArray;
  i: integer;
begin
  funcChat := chat.getChat(true);

  for i := low(funcChat) to high(funcChat) do
    if (pos('The effects of the cocktail boost', funcChat[i]) <> 0) then
      exit(true);

  result := false;
end;

procedure drinkCocktail;
begin
  inventory.clickItem(COCKTAIL_TID, COCKTAIL_CID);

  canDrinkCocktail.setTime(1500000);
end;

procedure mainLoop;
var
  funcReaction: procedure() = @twiddleThumbs;
begin
  if (canPrintProgress.isFinished()) then
    printProgress();

  antiban.checkRandoms();

  if (hasMaxTemperature()) and (not eatIceCream()) then
  begin
    writeln('Reached max temperature and could not eat any more ice cream.');
    login.logout();
    terminateScript();
  end
  else
  begin
    if (canDrinkCocktail.isFinished()) and (shouldDrinkCocktail()) then
      funcReaction := @drinkCocktail
    else if (not player.isAnimating(playerId)) and canCook.isFinished() then
      funcReaction := @cook;
  end;

  funcReaction();
end;

begin
  ogl.setup(WIDTH, HEIGHT);
  clientCenter := ogl.getClientMidPoint();
  startTime := getSystemTime();
  ogl.setDebugMode(GLX_DEBUG);
  cLib.selfUpdate();

  if (not web.isUpToDate(VERSION, 'https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLBarbeque.version')) then
    web.update('https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLBarbeque.version', 'OGLBarbeque');

  writeln('[OGL] Barbeque v', VERSION, ' by ChaosEnergy');
  writeln('=========================================');

  try
    antiban.setMeteoriteSkill(METEORITE_SKILL);
    playerId := player.getId();
    startExperience := player.getExperience();

    repeat
      mainLoop;
      wait(normalRandom(220, 670));
    until false;
  except
    writeln('Oops! It appears I have crashed.');
    login.logout();
    terminateScript();
  end;
end.
