program OGLBonfire;
{$i cLib.simba}

{ This script requires ogLib. Learn how to set it up correctly here:
  https://villavu.com/forum/showthread.php?t=112486

  This script also requires cLib. Learn how to set it up correctly here:
  https://villavu.com/forum/showthread.php?t=113750

  Make sure to set your game window to 'Resizable' and your interface to the
  RuneScape 3 default. Also turn on 'Show XP tracker' at the Interface settings.

  Change your prefered log type to burn at line 38.

  If you prefer a different screen size, change it at lines 49 and 50.

  Setup
  =====
  1. Bank preset 1 should be a full inventory of your logs.
  2. The log of your choice should be in slot 3 of your active action bar. }

type
  tLog = record
    id, cid, bankCid: integer;
  end;

{ const Log Constants;
  Description: Constants for the different types of logs. }
const
  NORMAL_LOG : tLog = [116280, 3089172, 3221015];
  OAK_lOG : tLog = [116280, 4141084, 4338207];
  WILLOW_LOG : tLog = [116280, 2301967, 2433553];
  MAPLE_LOG : tLog = [116280, 3022601, 3219980];
  YEW_LOG : tLog = [116280, 2431752, 2694666];
  MAGIC_LOG : tLog = [122910, 3947820, 4145199];
  ELDER_LOG : tLog = [118575, 3616291, 3747877];
  ALL_LOGS : tCardinalArray = [116280, 122910, 118575];
  LOG_TYPE : tLog = MAPLE_LOG; // change me

{ Script Constants;
  Description: Constants specific to thie script. }
const
  FIRES : tCardinalArray = [2057907316, 653711928];
  FIRE_SPIRIT = 1920637384;

{ const Misc Constants;
  Description: Miscellaneous constants for the script. }
const
  WIDTH = 1440;
  HEIGHT = 900;
  GLX_DEBUG = 'none'; // options: none, models, textures, fonts
  VERSION = '2.2.1';
  ALERT_FLAG = false;
  ALERT_KEYWORD = 'Username';
  ALERT_SOUND = 'C:\Simba\sound.wav';

var
  clientCenter: tPoint;
  startTime, startExperience, logsBurnt, playerId: integer;
  canAddToFire, canClickFireSpirit, canPrintProgress, canAlert: tCountDown;

procedure printProgress();
var
  elapsedTime: integer;
  hours: double;
  minutes: double;
  gainedExperience: integer;
begin
  elapsedTime := getSystemTime() - startTime;
  hours := elapsedTime / 3600000;
  minutes := floor(elapsedTime / 60000) mod 60;
  gainedExperience := player.getExperience() - startExperience;

  writeln('Running for: ', floor(hours), 'h ', minutes, 'm');
  writeln('Logs burnt: ', logsBurnt);
  writeln('Logs burnt per hour: ', floor(logsBurnt / hours));
  writeln('Experience earned: ', gainedExperience);
  writeln('Experience per hour: ', floor(gainedExperience / hours));
  writeln('=========================================');

  canPrintProgress.setTime(15000);
end;

procedure twiddleThumbs;
begin
  if ALERT_FLAG and canAlert.isFinished() then
  begin
    if antiban.alert(ALERT_KEYWORD) then
    begin
      playSound(ALERT_SOUND);
      canAlert.setTime(30000);
    end;
  end;

  case random(533) of
    1: antiban.rotateCamera(342, 11, 4);
  end;
end;

function shouldBank: boolean;
begin
  result := (inventory.getItems(LOG_TYPE.id, LOG_TYPE.cid).indexes() = 0);
end;

procedure withdrawItems;
begin
  if (inventory.getItemCount() <> 0) then
  begin
    bank.clickDepositCarriedItems();
    wait(normalRandom(800, 1600));
  end;

  if (canPrintProgress.isFinished()) then
    printProgress();

  bank.clickPreset(1);
  logsBurnt := logsBurnt + 28;

  wait(normalRandom(330, 590));
  bank.close();
end;

function hasFire: boolean;
var
  funcFires: glModelArray;
begin
  funcFires := ogl.getModels(FIRES);
  result := ((not funcFires.isEmpty()) and (clientCenter.distanceFrom(clientCenter.closest(funcFires)[0]) < 150));
end;

procedure addToFire;
var
  funcTimeout: tCountDown;
begin
  typeSend('3', false);

  funcTimeout.setTime(2000);
  repeat
    wait(normalRandom(150, 550));;
  until (production.hasProduction()) or (funcTimeout.isFinished());

  if (production.hasProduction()) then
    typeSend('3', false);

  canAddToFire.setTime(4000);
end;

procedure startFire;
var
  funcTimeout: tCountDown;
begin
  typeSend('3', false);

  funcTimeout.setTime(2000);
  repeat
    wait(normalRandom(150, 550));;
  until (production.hasProduction()) or (funcTimeout.isFinished());

  if (production.hasProduction()) then
    typeSend('1', false);

  funcTimeout.setTime(5000);
  repeat
    wait(normalRandom(150, 550));;
  until (hasFire()) or (funcTimeout.isFinished());
end;

function isFireSpirit: boolean;
begin
  result := (not ogl.getModels(FIRE_SPIRIT).isEmpty());
end;

procedure clickFireSpirit;
var
  funcClickPoint: tPoint;
begin
  wait(normalRandom(1500, 2500));
  funcClickPoint := clientCenter.closest(ogl.getModels(FIRE_SPIRIT))[0].randomizePointEllipse(8);
  funcClickPoint := [funcClickPoint.x, (funcClickPoint.y - normalRandom(7, 18))];

  if (not mouse.rightClickOption(funcClickPoint, 'Collect', normalRandom(250, 550))) then
  begin
    wait(normalRandom(800, 1600));
    funcClickPoint := [funcClickPoint.x, (funcClickPoint.y + normalRandom(7, 18))];
    mouse.rightClickOption(funcClickPoint, 'Collect', normalRandom(250, 550))
  end;

  canClickFireSpirit.setTime(normalRandom(9000, 11000));
  canAddToFire.setTime(normalRandom(1500, 2500));
end;

procedure mainLoop
var
  funcReaction: procedure() = @twiddleThumbs;
begin
  if (shouldBank()) then
  begin
    if (not bank.hasBank()) then
      bank.open()
    else if (bank.hasBank()) and (not inventory.isFull()) then
      funcReaction := @withdrawItems;
  end
  else
  begin
    if (bank.hasBank()) then
      bank.close()
    else if (not hasFire()) then
      funcReaction := @startFire
    else if (not player.isAnimating(playerId)) and (canAddToFire.isFinished()) then
    begin
      funcReaction := @addToFire;
      canAddToFire.setTime(4000);
    end
    else if (isFireSpirit()) and (canClickFireSpirit.isFinished()) and (inventory.getItemCount() < 24) then
      funcReaction := @clickFireSpirit;
  end;

  funcReaction();
end;

begin
  ogl.setup(WIDTH, HEIGHT);
  clientCenter := ogl.getClientMidPoint();
  startTime := getSystemTime();
  ogl.setDebugMode(GLX_DEBUG);
  cLib.selfUpdate();

  if (not web.isUpToDate(VERSION, 'https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLBonfire.version')) then
    web.update('https://raw.githubusercontent.com/yuri-moens/simba-scripts/master/OGLBonfire.version', 'OGLBonfire');

  writeln('[OGL] Bonfire v', VERSION, ' by ChaosEnergy');
  writeln('=========================================');

  playerId := player.getId();

  try
    startExperience := player.getExperience();

    repeat
      mainLoop;
      wait(normalRandom(220, 670));
    until false;
  except
    writeln('Oops! It appears I have crashed.');
    login.logout();
    terminateScript();
  end;
end.